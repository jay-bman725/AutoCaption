name: Build and Release Electron App

on:
  push:
    branches:
      - main

jobs:
  read-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Read version from file
        id: get-version
        run: echo "VERSION=$(cat version)" >> $GITHUB_OUTPUT

  build-linux:
    needs: read-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build for Linux
        run: npx electron-builder --linux
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Rename Linux installers
        run: |
          VERSION=${{ needs.read-version.outputs.version }}
          for f in dist/*; do
            ext="${f##*.}"
            mv "$f" "dist/linux-AutoCaption-v${VERSION}.${ext}"
          done

      - name: Upload Linux installers
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist/linux-AutoCaption-v*.{deb,AppImage}

  build-windows:
    needs: read-version
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build for Windows ${{ matrix.arch }}
        run: npx electron-builder --win --${{ matrix.arch }}
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Rename Windows installer
        shell: bash
        run: |
          VERSION=${{ needs.read-version.outputs.version }}
          ARCH=${{ matrix.arch }}
          FILENAME="windows-AutoCaption-v${VERSION}"
          if [ "$ARCH" = "arm64" ]; then
            FILENAME="${FILENAME}-arm64"
          fi
          mv dist/*.exe "dist/${FILENAME}.exe"

      - name: Upload Windows installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist/windows-AutoCaption-v*.exe

  build-macos:
    needs: read-version
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build macOS x64
        run: npx electron-builder --mac --x64
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Rename x64 .dmg
        run: |
          VERSION=${{ needs.read-version.outputs.version }}
          mv dist/*.dmg "dist/macos-AutoCaption-v${VERSION}-x64.dmg"

      - name: Build macOS arm64
        run: npx electron-builder --mac --arm64
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Rename arm64 .dmg
        run: |
          VERSION=${{ needs.read-version.outputs.version }}
          mv dist/*.dmg "dist/macos-AutoCaption-v${VERSION}-arm64.dmg"

      - name: Upload macOS installers
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: dist/macos-AutoCaption-v*.dmg

  release:
    needs: [build-linux, build-windows, build-macos, read-version]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: combined-artifacts

      - name: List artifact directory contents
        run: find combined-artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.read-version.outputs.version }}
          name: v${{ needs.read-version.outputs.version }}
          files: |
            combined-artifacts/linux-build/linux-AutoCaption-v*.deb
            combined-artifacts/linux-build/linux-AutoCaption-v*.AppImage
            combined-artifacts/windows-build/windows-AutoCaption-v*.exe
            combined-artifacts/macos-build/macos-AutoCaption-v*.dmg
          token: ${{ secrets.GH_PAT }}
